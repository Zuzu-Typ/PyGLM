\h1 \PyGLM\ h1\
\h2 \OpenGL Mathematics (GLM) library for Python\ h2\
\b \GLSL + Optional features + Python = PyGLM\ b\
\b \A mathematics library for graphics programming.\ b\

\b \PyGLM\ b\ is a Python extension written in \b \C++\ b\. 
By using \url https://glm.g-truc.net \GLM by G-Truc\ url\ under the hood, it manages to bring \b \glm's features\ b\ to Python.  
Some features are unsupported (such as most unstable extensions).
If you encounter any issues or want to request a feature, please create an issue on the \url https://github.com/Zuzu-Typ/PyGLM/issues \issue tracker\ url\.

\b\For a complete reference of the types and functions, please take a look at the \url https://github.com/Zuzu-Typ/PyGLM/wiki \wiki\ url\\b\.

\h2 \Tiny Documentation\ h2\
\h3 \Why PyGLM?\ h3\
Besides the obvious - being mostly compatible with \b \GLM\ b\ - PyGLM offers a variety of features for \b \vector\ b\ and \b \matrix manipulation\ b\.
It has a lot of possible use cases, including \b \3D-Graphics\ b\ (OpenGL, DirectX, ...), \b \Physics\ b\ and more.

At the same time, it has \b \great performance\ b\, being between \b \1.5x and 100x as fast as numpy!\ b\ (see \url #speed-comparison-to-numpy \end of page\ url\)
(\i \depending on the individual function\ i\)
\h3 \Installation\ h3\
\b \PyGLM\ b\ supports \b \Windows\ b\, \b \Linux\ b\, \b \MacOS\ b\ and other operating systems with either x86 (\b \32-bit\ b\) or x64 (\b \64-bit\ b\) architecture, 
running \b \Python 3\ b\.5 or higher. (Prior versions of Python - such as Python 2 - were supported up to PyGLM version 0.4.8b1)

It can be installed from the \url https://pypi.python.org/pypi/PyGLM \PyPI\ url\ using \url https://pip.pypa.io/en/stable/ \pip\ url\:
\code batch\
pip install PyGLM
# please make sure to install "PyGLM" and not "glm", which is a different module
\ code\
And finally imported and used:
\code python \
import glm
\ code\
\h3 \Using PyGLM\ h3\
PyGLM's syntax is very similar to the original GLM's syntax.
There is no need to import anything but \b \glm\ b\, as it already contains the entire package.

For more information, take a look at the \url https://github.com/Zuzu-Typ/PyGLM/wiki \wiki\ url\.
\h4 \License requirements\ h4\
Please make sure to \b \include the license for GLM\ b\ in your project when you use PyGLM!
(this is especially relevant for \b \binary distributions\ b\, e.g. *.exe)

You can do so by copying the \code \COPYING\ code\ file (or it's contents) to your project.
\h4 \Differences to glm\ h4\
Instead of using double colons (\b \::\ b\) for namespaces, periods (\b \.\ b\) are used, so
\code \glm::vec2\ code\ becomes \code \glm.vec2\ code\.

PyGLM supports the \url https://docs.python.org/3/c-api/buffer.html \buffer protocol\ url\, meaning its compitible to other objects that support the buffer protocol,
such as \code \bytes\ code\ or \code \numpy.array\ code\ 
(for example you can convert a glm matrix to a numpy array and vice versa).
PyGLM is also capable of interpreting iterables (such as tuples) as vectors, so e.g. the following equasion is possible:
\code python \
result = glm.vec2(1) * (2, 3)
\ code\
\i\Note: This feature might not or only partially be available in PyGLM versions prior to 2.0.0\i\

PyGLM doesn't support precision qualifiers. All types use the default precision (\code \packed_highp\ code\).

If a glm function normally accepts \code \float\ code\ and \code \double\ code\ arguments, the higher precision (\code \double\ code\) is used.

There is no way to set preprocessor definitions (macros).
If - for example - you need to use the left handed coordinate system, you have to use \b \*LH\ b\, so
\code \glm.perspective\ code\ becomes \code \glm.perspectiveLH\ code\.

All types are initialized by default to avoid memory access violations.
(i.e. the macro \code \GLM_FORCE_CTOR_INIT\ code\ is defined)

In case you need the size of a PyGLM datatype, you can use 
\code python \
glm.sizeof(<type>)
\ code\

The function \code \glm.identity\ code\ requires a matrix type as it's argument.

The function \code \glm.frexp(x, exp)\ code\ returns a tuple \code \(m, e)\ code\, if the input arguments are numerical.
This function may issue a \code \UserWarning\ code\. You can silence this warning using \code \glm.silence(1)\ code\.

The function \code \glm.value_ptr(x)\ code\ returns a ctypes pointer of the respective type.
I.e. if the datatype of \code \x\ code\ is \code \float\ code\, then a \code \c_float\ code\ pointer will be returned.
Likewise the reverse-functions (such as \code \make_vec2(ptr)\ code\) will take a ctypes pointer as their argument
and return (in this case) a 2 component vector of the pointers underlying type.

\code \glm.silence(ID)\ code\ can be used to silence specific warnings.
Supplying an id of 0 will silence all warnings.


\h3\FAQ\h3\
\h4\How to pass the matrices generated by PyGLM to OpenGL functions?\h4\
You will find an overview on the [\url wiki/Passing-data-to-external-libs.md \Passing data to external libs\ url\] page.

\h4\Types and functions are not available after installing from the PyPI using \code\pip install glm\code\\h4\
Most likely you've installed \url https://pypi.org/project/glm/ \glm\ url\, a JSON parser and not \url https://pypi.org/project/PyGLM/ \PyGLM\ url\ (or a very early version of PyGLM).  
The correct install command is:
\code\
pip install PyGLM
\code\

\h4\Why is \i\<experimental extension name here>\i\ not supported?\h4\
I prefer not to add too many experimental extensions to PyGLM, especially as they might change or be removed in the future and it is simply too much effort for me to keep up with all that.  
If you \b\need a specific experimental extension\b\, feel free to \b\submit a feature request\b\ on the \url https://github.com/Zuzu-Typ/PyGLM/issues \issue tracker\ url\.  
I try adding them on a one-by-one basis.

\h4\Why are Python versions prior to 3.5 no longer supported?\h4\
Starting with version \url https://github.com/Zuzu-Typ/PyGLM/releases/tag/0.5.0b1 \0.5.0b1\ url\ I decided to use C++ to build PyGLM, using \url https://glm.g-truc.net/ \glm\ url\ under the hood - which requires C++ 11 or upwards.  
Only Python versions 3.5+ support C++ 11, thus I was forced to stop supporting older versions.  
The last version to support Python 2 and <3.5 is \url https://github.com/Zuzu-Typ/PyGLM/releases/tag/0.4.8b1 \0.4.8b1\ url\.

\h3 \Short example\ h3\
\code Python \
>>> import glm
>>> v = glm.vec3()
>>> v.x = 7
>>> print(v.xxy)
vec3(            7,            7,            0 )

>>> m = glm.mat4()
>>> print(m)
[            1 |            0 |            0 |            0 ]
[            0 |            1 |            0 |            0 ]
[            0 |            0 |            1 |            0 ]
[            0 |            0 |            0 |            1 ]

>>> v = glm.vec4(1, 2, 3, 4)
>>> print(v + (8, 7, 6, 5))
vec4(            9,            9,            9,            9 )
\ code\

\h3 \Speed comparison to numpy\ h3\
\code \
The following chart shows the results of running "PyGLM vs NumPy.py".
Each of the instructions were ran for 1 second to get more accurate results.

+----------------------------------------+------------+------------+-----------+
| Description                            | PyGLM runs | NumPy runs | ratio     |
+----------------------------------------+------------+------------+-----------+
| 3 component vector creation            |    3.555M  |    2.410M  |     1.47x |
+----------------------------------------+------------+------------+-----------+
| 3 component vector creation with       |            |            |           |
| custom components                      |    3.293M  |  716,951   |     4.59x |
+----------------------------------------+------------+------------+-----------+
| dot product                            |    4.334M  |  900,117   |     4.82x |
+----------------------------------------+------------+------------+-----------+
| cross product                          |    4.143M  |   42,090   |    98.45x |
+----------------------------------------+------------+------------+-----------+
| L2-Norm of 3 component vector          |    4.685M  |  278,776   |    16.81x |
+----------------------------------------+------------+------------+-----------+
| 4x4 matrix creation                    |    3.982M  |    2.387M  |     1.67x |
+----------------------------------------+------------+------------+-----------+
| 4x4 identity matrix creation           |    4.077M  |  453,426   |     8.99x |
+----------------------------------------+------------+------------+-----------+
| 4x4 matrix transposition               |    3.960M  |    1.254M  |     3.16x |
+----------------------------------------+------------+------------+-----------+
| 4x4 matrix multiplicative inverse      |    3.727M  |   36,977   |   100.81x |
+----------------------------------------+------------+------------+-----------+
| 3 component vector addition            |    3.585M  |    1.432M  |     2.50x |
+----------------------------------------+------------+------------+-----------+
| 4x4 matrix multiplication              |    3.096M  |    1.349M  |     2.29x |
+----------------------------------------+------------+------------+-----------+
| 4x4 matrix - 4 component vector        |            |            |           |
| multiplication                         |    3.278M  |  681,509   |     4.81x |
+----------------------------------------+------------+------------+-----------+
\ code\