\h1 \PyGLM\ h1\
\h2 \OpenGL Mathematics (GLM) library for Python\ h2\
\b \GLSL + Optional features + Python = PyGLM\ b\
\b \A mathematics library for graphics programming.\ b\

\b \PyGLM\ b\ is a Python extension written in \b \C++\ b\. 
By using \url https://glm.g-truc.net \GLM by G-Truc\ url\ under the hood, it manages to bring \b \glm's features\ b\ to Python.  
Some features are unsupported (such as most unstable extensions) - Please see \url #unsupported-functions \Unsupported Functions\ url\ below.
If you encounter any issues or want to request a feature, please create an issue on the \url https://github.com/Zuzu-Typ/PyGLM/issues \issue tracker\ url\.

\b\For a (barely) complete reference, please take a look at the \url https://github.com/Zuzu-Typ/PyGLM/wiki \wiki\ url\\b\.

\h2 \Tiny Documentation\ h2\
\h3 \Why PyGLM?\ h3\
Besides the obvious - being mostly compatible with \b \GLM\ b\ - PyGLM offers a variety of features for \b \vector\ b\ and \b \matrix manipulation\ b\.
It has a lot of possible use cases, including \b \3D-Graphics\ b\ (OpenGL, DirectX, ...), \b \Physics\ b\ and more.

At the same time, it has \b \great performance\ b\, being between \b \2x and 15x as fast as numpy!\ b\ (see end of page)
(\i \depending on the individual function\ i\)
\h3 \Installation\ h3\
\b \PyGLM\ b\ supports \b \Windows\ b\, \b \Linux\ b\, \b \MacOS\ b\ and other operating systems with either x86 (\b \32-bit\ b\) or x64 (\b \64-bit\ b\) architecture, 
running \b \Python 3\ b\.5 or higher. (Prior versions of Python - such as Python 2 - were supported up to PyGLM version 0.4.8b1)

It can be installed from the \url https://pypi.python.org/pypi/PyGLM \PyPI\ url\ using \url https://pip.pypa.io/en/stable/ \pip\ url\:
\code batch\
pip install PyGLM
# please make sure to install "PyGLM" and not "glm", which is a different module
\ code\
And finally imported and used:
\code python \
import glm
\ code\
\h3 \Using PyGLM\ h3\
PyGLM's syntax is very similar to the original GLM's syntax.
There is no need to import anything but \b \glm\ b\, as it already contains the entire package.
\h4 \License requirements\ h4\
Please make sure to \b \include the license for GLM\ b\ in your project when you use PyGLM!
(this also includes \b \binary distributions\ b\, e.g. *.exe)

You can do so by copying the \code \COPYING\ code\ file (or it's contents) to your project.
\h4 \Differences to glm\ h4\
Instead of using double colons (\b \::\ b\) for namespaces, periods (\b \.\ b\) are used, so
\code \glm::vec2\ code\ becomes \code \glm.vec2\ code\.

PyGLM supports the \url https://docs.python.org/3/c-api/buffer.html \buffer protocol\ url\, meaning its compitible to other objects that support the buffer protocol,
such as \code \bytes\ code\ or \code \numpy.array\ code\ 
(for example you can convert a glm matrix to a numpy array and vice versa).
PyGLM is also capable of interpreting iterables (such as tuples) as vectors, so e.g. the following equasion is possible:
\code python \
result = glm.vec2(1) * (2, 3)
\ code\
\i\Note: This feature might not or only partially be available in PyGLM versions prior to 2.0.0\i\

PyGLM doesn't support precision qualifiers. All types use the default precision (\code \packed_highp\ code\).

If a glm function normally accepts \code \float\ code\ and \code \double\ code\ arguments, the higher precision (\code \double\ code\) is used.

There is no way to set preprocessor definitions (macros).
If - for example - you need to use the left handed coordinate system, you have to use \b \*LH\ b\, so
\code \glm.perspective\ code\ becomes \code \glm.perspectiveLH\ code\.

All types are initialized by default to avoid memory access violations.
(i.e. the macro \code \GLM_FORCE_CTOR_INIT\ code\ is defined)

In case you need the size of a PyGLM datatype, you can use 
\code python \
glm.sizeof(<type>)
\ code\

The function \code \glm.identity\ code\ requires a matrix type as it's argument.

The function \code \glm.frexp(x, exp)\ code\ returns a tuple \code \(m, e)\ code\, if the input arguments are numerical.
This function may issue a \code \UserWarning\ code\. You can silence this warning using \code \glm.silence(1)\ code\.

The function \code \glm.value_ptr(x)\ code\ returns a ctypes pointer of the respective type.
I.e. if the datatype of \code \x\ code\ is \code \float\ code\, then a \code \c_float\ code\ pointer will be returned.
Likewise the reverse-functions (such as \code \make_vec2(ptr)\ code\) will take a ctypes pointer as their argument
and return (in this case) a 2 component vector of the pointers underlying type.

\code \glm.silence(ID)\ code\ can be used to silence specific warnings.
Supplying an id of 0 will silence all warnings.

\h4 \Unsupported functions\ h4\
Aside from most of the unstable extensions,
PyGLM doesn't support the following extensions and methods, due to compatability issues:
The \code \GLM_GTC_bitfield\ code\ extension,
\code \glm::log2\ code\ from GLM_GTC_integer.
\code \glm::packUnorm\ code\ and \code \glm::packSnorm\ code\ from GLM_GTC_packing.

\h3 \Example\ h3\
\code Python \
>>> import glm
>>> v = glm.vec3()
>>> v.x = 7
>>> print(v.xxy)
vec3(            7,            7,            0 )

>>> m = glm.mat4()
>>> print(m)
[            1 |            0 |            0 |            0 ]
[            0 |            1 |            0 |            0 ]
[            0 |            0 |            1 |            0 ]
[            0 |            0 |            0 |            1 ]

>>> v = glm.vec4(1, 2, 3, 4)
>>> print(v + (8, 7, 6, 5))
vec4(            9,            9,            9,            9 )
\ code\

\h3 \Speed comparison to numpy\ h3\
\code \
How PyGLM's performance roughly compares to NumPy's performance:
instruction     | np speed (%)  | glm speed (%)
import          |   4.76        |  100.00
mat4()          |   9.76        |  100.00
dot(vec3, vec3) |  28.92        |  100.00
transpose(mat4) |  25.64        |  100.00
vec4 * vec4     |  27.89        |  100.00
mat4 * vec4     |  17.68        |  100.00
mat4[0]         |  49.99        |  100.00
\ code\