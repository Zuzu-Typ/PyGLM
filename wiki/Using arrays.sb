PyGLM's array type was introduced in version 2.0.0 to reduce the likelihood of requiring users to also use numpy besides glm.

It's mainly intended to \b\provide a way of passing multiple glm type instances\b\ (such as vectors) \b\to external C functions\b\ 
(such as glBufferData).

\h2\Table of contents\h2\
\lo\
\-\\url #about-arrays\About arrays\url\
\-\\url #initialization\Initialization\url\\list switch\
\--\\url #-with-vectors-matrices-or-quaternions\.. with vectors, matrices or quaternions\url\
\--\\url #-with-other-array-instances\.. with other array instances\url\
\--\\url #-with-other-compatible-arrays--lists--iterables\.. with other compatible arrays / lists / iterables\url\\list switch\
\-\\url #members\Members\url\
\-\\url #methods\Methods\url\\list switch\
\--\\url #the-copy-protocol\The copy protocol\url\
\--\ \url #pickling \Pickling\ url\
\--\\url #to-list--tuple\To list / tuple\url\\list switch\
\-\\url #operators\Operators\url\\list switch\
\--\\url #concat--operator\concat\url\
\--\\url #repeat--operator\repeat\url\
\--\\url #getitem-and-setitem--operator\getitem and setitem\url\
\--\\url #contains-in-operator\contains\url\
\--\\url #len\len\url\
\--\\url #str\str\url\
\--\\url #repr\repr\url\
\--\\url #iter\iter\url\
\--\\url #hash\hash\url\
\list\

\h2\About arrays\h2\
PyGLM's arrays are pure data copies of \b\one or multiple instances\b\ of a \b\single PyGLM type\b\.
For example, an array could copy the data of five different \code\vec3\code\ instances.
However, it cannot copy the data of instances, that don't have the same type, like two \code\vec2\code\ instances and one \code\dvec2\code\ instance.

Additionally, the data inside the array is only a \b\copy\b\, thus if the data inside the array is modified, it won't affect the instances it copied the data from.

\h2\Initialization\h2\
Arrays can be initialized in a few different ways.
\h3\... with vectors, matrices or quaternions\h3\
An array can be initialized with any number of vectors, metrices or quaternions, as long as they're all of the same type.
\code Python\
>>> array(vec3(1, 2, 3), vec3(4, 5, 6))
array(vec3(1, 2, 3), vec3(4, 5, 6))

>>> array(vec3(), ivec3())
TypeError: arrays have to be initialized with arguments of the same glm type
\code\

\i\Note: The list representations of vecs, mats and quats such as \code\((1, 2), (3, 4))\code\ (an alias for \code\mat2(1, 2, 3, 4)\code\) cannot be used here.\i\

\h3\... with other array instances\h3\
You can obtain a copy of an array by using the copy constructor.
\code Python\
arr_copy = array(arr)
\code\

\h3\... with other compatible arrays / lists / iterables\h3\
You can convert any compatible type to a PyGLM array.
This includes lists, tuples, etc. and types that support the buffer protocol (such as numpy's arrays):
\code Python\
>>> array((ivec1(), ivec1()))
array(ivec1(0), ivec1(0))

>>> array([dmat2()])
array(dmat2x2((1, 0), (0, 1)))

>>> array(numpy.array([[1,2,3]]))
array(ivec3(1, 2, 3))

>>> array([[1,2,3]])
TypeError: invalid argument type(s) for array()
\code\
\i\Note: array buffers that store length 4 items are interpreted as vec4s rather than quats.\i\


\h2\Members\h2\
PyGLM arrays have the following members:
\tbl\
Name \-\ Type \-\ Description
element_type \-\ type \-\ Type class of the contained elements (e.g. \code\glm.vec3\code\)
length \-\ int \-\ Number of elements contained by a given array
address \-\ int \-\ The memory address where an array's data is stored
ptr \-\ c_void_p \-\ A ctypes pointer that points to the content of an array
nbytes \-\ int \-\ The total data size in bytes
typecode \-\ str \-\ A single character, describing the data type of the elements' values, according to \url https://docs.python.org/3/library/struct.html#format-characters \this list\url\
dtype \-\ str \-\ A numpy-like data type string
itemsize \-\ int \-\ The size of one array element in bytes
dt_size \-\ int \-\ The size of each single component of the elements in bytes (size of data type)
\tbl\

\h2\Methods\h2\
\h3\The copy protocol\h3\
Arrays support the copy protocol (see \url https://docs.python.org/3/library/copy.html \here\ url\).  
You can use \code\copy.copy(<array>)\code\ or \code\copy.deepcopy(<array>)\code\ to get a copy of an array.

\h3\Pickling\h3\
Arrays support \url https://docs.python.org/3/library/pickle.html#module-interface \pickling\url\ (as of PyGLM 2.0.0), which is Python's serialization method.

\h3\To list / tuple\h3\
Any array has a \code\to_list()\code\ and a \code\to_tuple()\code\ function, which return's the arrays's data represented as a list or tuple respectively.

\h2\Operators\h2\
\h3\concat (\code\+\code\ operator)\h3\
Arrays can be combined / concaternated using the \code\+\code\ operator, as long as they have the same element type.
\code Python\
>>> array(vec2(1, 2)) + array(vec2(3, 4))
array(vec2(1, 2), vec2(3, 4))

>>> array(vec4()) + array(vec1())
ValueError: the given arrays are incompatible
\code\

\h3\repeat (\code\*\code\ operator)\h3\
Arrays can be repeated a given number of times using the \code\*\code\ operator.
\code Python\
>>> array(vec3(1, 2, 3)) * 3
array(vec3(1, 2, 3), vec3(1, 2, 3), vec3(1, 2, 3))
\code\

\h3\getitem, setitem and delitem (\code\[]\code\ operator)\h3\
You can access the individual elements of an array using indices.
Likewise you can also modify it's data by overwriting it or delete it using \code\del\code\
\code Python\
>>> arr = array(vec1(1), vec1(2), vec1(3))
>>> arr[0]
vec1( 1 )

>>> arr[1] = vec1(0)
>>> arr
array(vec1(1), vec1(0), vec1(3))

>>> del arr[2]
>>> arr
array(vec1(1), vec1(0))
\code\

You can also use slices to get or modify sub-arrays:
\code Python\
>>> arr = array(vec1(1), vec1(2), vec1(3), vec1(4))
>>> arr[:2]
array(vec1(1), vec1(2))

>>> arr[::2]
array(vec1(1), vec1(3))

>>> del arr[1:3]
>>> arr
array(vec1(1), vec1(4))

>>> arr[:] = array(vec1(8), vec1(9))
>>> arr
array(vec1(8), vec1(9))
\code\

Slices have the following syntax: \code\start_index : stop_index : optional_step\code\, meaning you start at \code\start\code\ and go \code\step\code\ steps until you've reached or passed \code\stop\code\ (exclusive) or the greatest possible index.


\h3\contains (\code\in\code\ operator)\h3\
You can check wether or not an element is present in the array using the \code\in\code\ operator.
\code Python\
>>> arr = array(vec2(1, 2), vec2(3, 4))
>>> vec2() in arr
False

>>> vec2(3, 4) in arr
True

>>> vec2(2, 3) in arr
False
\code\

\h3\len\h3\
You can acquire the length of an array using the built-in \code\len()\code\ function.
\code Python\
>>> len(array(vec1(0), vec1(1)))
2

>>> len(array(vec2(0, 1), vec2(2, 3), vec2(4, 5)))
3
\code\

\h3\str\h3\
You can get a string representation of an array using the built-in \code\str()\code\ function.
Example:
\code Python\
>>> print(str(array(vec2(1, 2), vec2(3, 4), vec2(5, 6))))
[
 [            1,            2 ],
 [            3,            4 ],
 [            5,            6 ],
]

>>> print(str(array(mat2(1, 2, 3, 4), mat2(5, 6, 7, 8))))
[
 [
  [            1,            2 ],
  [            3,            4 ],
 ],
 [
  [            5,            6 ],
  [            7,            8 ],
 ],
]
\code\

\h3\repr\h3\
You can get a reproducable string representation of an array using the built-in \code\str()\code\ function.
Example:
\code Python\
>>> print(repr(array(vec2(1, 2), vec2(3, 4), vec2(5, 6))))
array(vec2(1, 2), vec2(3, 4), vec2(5, 6))

>>> print(repr(array(mat2(1, 2, 3, 4), mat2(5, 6, 7, 8))))
array(mat2x2((1, 2), (3, 4)), mat2x2((5, 6), (7, 8)))
\code\

\h3\iter\h3\
You can get an iterator from an array using \code\iter()\code\
\code Python\
>>> arr = array(vec2(1, 2), vec2(3, 4))
>>> it = iter(arr)
>>> next(it)
vec2( 1, 2 )

>>> next(it)
vec2( 3, 4 )
\code\

\h3\hash\h3\
You can generate a hash value for arrays using \code\hash()\code\
Example:
\code Python\
>>> arr = array(vec3(1), vec3(2), vec3(3), vec3(4))
>>> hash(arr)
-2624592468369027458
>>> arr2 = array(vec3(1), vec3(2), vec3(3))
>>> hash(arr2)
9163283608357050393
>>> arr3 = arr2 + array(vec3(4))
>>> hash(arr3)
-2624592468369027458
\code\