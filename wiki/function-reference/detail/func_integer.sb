\c\This file was generated using a tool\c\
\h1\func_integer methods\h1\
The following methods are all part of the \b\func_integer methods\b\.
It contains GLSL functions on integer types.
\h2\Table of contents\h2\
\ul\
\-\\url #bitcount-function\\b\bitCount\b\ function\url\
\-\\url #bitfieldextract-function\\b\bitfieldExtract\b\ function\url\
\-\\url #bitfieldinsert-function\\b\bitfieldInsert\b\ function\url\
\-\\url #bitfieldreverse-function\\b\bitfieldReverse\b\ function\url\
\-\\url #findlsb-function\\b\findLSB\b\ function\url\
\-\\url #findmsb-function\\b\findMSB\b\ function\url\
\-\\url #imulextended-function\\b\imulExtended\b\ function\url\
\-\\url #uaddcarry-function\\b\uaddCarry\b\ function\url\
\-\\url #umulextended-function\\b\umulExtended\b\ function\url\
\-\\url #usubborrow-function\\b\usubBorrow\b\ function\url\
\ul\
\h3\bitCount() function\h3\
\raw\#### <code>glm.<code>**bitCount**(**v**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the number of bits set to 1 in the binary representation of value.

\raw\#### <code>glm.<code>**bitCount**(**v**: *ivecN*) -\\> *ivecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\For every component c of v:
\raw\&emsp;&emsp;\raw\Returns the number of bits set to 1 in the binary representation of c.

\h3\bitfieldExtract() function\h3\
\raw\#### <code>glm.<code>**bitfieldExtract**(**value**: *int*, **offset**: *int*, **bits**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Extracts bits [offset, offset + bits - 1] from value, returning them in the least
\raw\&emsp;&emsp;\raw\significant bits of the result. For unsigned data types, the most significant bits of the
\raw\&emsp;&emsp;\raw\result will be set to zero. For signed data types, the most significant bits will be set to
\raw\&emsp;&emsp;\raw\the value of bit offset + base - 1. If bits is zero, the result will be zero.The result
\raw\&emsp;&emsp;\raw\will be undefined if offset or bits is negative, or if the sum of offsetand bits is greater
\raw\&emsp;&emsp;\raw\than the number of bits used to store the operand.

\raw\#### <code>glm.<code>**bitfieldExtract**(**value**: *vecN*, **offset**: *int*, **bits**: *int*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns bitfieldExtract(c, offset, bits) for every component c of value.

\h3\bitfieldInsert() function\h3\
\raw\#### <code>glm.<code>**bitfieldInsert**(**base**: *int*, **insert**: *int*, **offset**: *int*, **bits**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the insertion the bits least-significant bits of insert into base. The result will
\raw\&emsp;&emsp;\raw\have bits[offset, offset + bits - 1] taken from bits[0, bits - 1] of insert, and all other
\raw\&emsp;&emsp;\raw\bits taken directly from the corresponding bits of base. If bits is zero, the result will
\raw\&emsp;&emsp;\raw\simply be base.The result will be undefined if offset or bits is negative, or if the sum of
\raw\&emsp;&emsp;\raw\offsetand bits is greater than the number of bits used to store the operand.

\raw\#### <code>glm.<code>**bitfieldInsert**(**base**: *vecN*, **insert**: *vecN*, **offset**: *int*, **bits**: *int*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns bitfieldInsert(base[i], insert[i], offset, bits) for every index i.

\h3\bitfieldReverse() function\h3\
\raw\#### <code>glm.<code>**bitfieldReverse**(**value**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the reversal of the bits of value. The bit numbered n of the result will be taken
\raw\&emsp;&emsp;\raw\from bit(bits - 1) - n of value, where bits is the total number of bits used to represent
\raw\&emsp;&emsp;\raw\value.

\raw\#### <code>glm.<code>**bitfieldReverse**(**value**: *vecN*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the reversal of the bits of value. The bit numbered n of the result will be taken
\raw\&emsp;&emsp;\raw\from bit(bits - 1) - n of value, where bits is the total number of bits used to represent
\raw\&emsp;&emsp;\raw\value.

\h3\findLSB() function\h3\
\raw\#### <code>glm.<code>**findLSB**(**value**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the bit number of the least significant bit set to 1 in the binary representation
\raw\&emsp;&emsp;\raw\of value. If value is zero, -1 will be returned.

\raw\#### <code>glm.<code>**findLSB**(**value**: *vecN*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the bit number of the least significant bit set to 1 in the binary representation
\raw\&emsp;&emsp;\raw\of value. If value is zero, -1 will be returned.

\h3\findMSB() function\h3\
\raw\#### <code>glm.<code>**findMSB**(**value**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the bit number of the most significant bit in the binary representation of value.
\raw\&emsp;&emsp;\raw\For positive integers, the result will be the bit number of the most significant bit set to
\raw\&emsp;&emsp;\raw\1. For negative integers, the result will be the bit number of the most significant bit set
\raw\&emsp;&emsp;\raw\to 0. For a value of zero or negative one, -1 will be returned.

\raw\#### <code>glm.<code>**findMSB**(**value**: *vecN*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the bit number of the least significant bit set to 1 in the binary representation
\raw\&emsp;&emsp;\raw\of value. If value is zero, -1 will be returned.

\h3\imulExtended() function\h3\
\raw\#### <code>glm.<code>**imulExtended**(**x**: *ivecN*, **y**: *ivecN*, **msb**: *ivecN*, **lsb**: *ivecN*) -\\> *ivecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Multiplies 32-bit integers x and y, producing a 64-bit result. The 32 least - significant
\raw\&emsp;&emsp;\raw\bits are returned in lsb.The 32 most - significant bits are returned in msb.

\h3\uaddCarry() function\h3\
\raw\#### <code>glm.<code>**uaddCarry**(**x**: *uvecN*, **y**: *uvecN*, **carry**: *uvecN*) -\\> *uvecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Adds 32-bit unsigned integer x and y, returning the sum modulo pow(2, 32). The value carry
\raw\&emsp;&emsp;\raw\is set to 0 if the sum was less than pow(2, 32), or to 1 otherwise.

\h3\umulExtended() function\h3\
\raw\#### <code>glm.<code>**umulExtended**(**x**: *uvecN*, **y**: *uvecN*, **msb**: *uvecN*, **lsb**: *uvecN*) -\\> *uvecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Multiplies 32-bit integers x and y, producing a 64-bit result. The 32 least - significant
\raw\&emsp;&emsp;\raw\bits are returned in lsb.The 32 most - significant bits are returned in msb.

\h3\usubBorrow() function\h3\
\raw\#### <code>glm.<code>**usubBorrow**(**x**: *uvecN*, **y**: *uvecN*, **borrow**: *uvecN*) -\\> *uvecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Subtracts the 32-bit unsigned integer y from x, returning the difference if non-negative,
\raw\&emsp;&emsp;\raw\or pow(2, 32) plus the difference otherwise. The value borrow is set to 0 if x >= y, or to
\raw\&emsp;&emsp;\raw\1 otherwise.

