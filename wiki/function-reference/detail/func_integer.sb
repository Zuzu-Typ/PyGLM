\c\This file was generated using a tool\c\
\h1\func_integer methods\h1\
The following methods are all part of the \b\func_integer methods\b\.
It contains GLSL functions on integer types.
\h2\Table of contents\h2\
\ul\
\-\\url #bitcount-function\\b\bitCount\b\ function\url\
\-\\url #bitfieldextract-function\\b\bitfieldExtract\b\ function\url\
\-\\url #bitfieldinsert-function\\b\bitfieldInsert\b\ function\url\
\-\\url #bitfieldreverse-function\\b\bitfieldReverse\b\ function\url\
\-\\url #findlsb-function\\b\findLSB\b\ function\url\
\-\\url #findmsb-function\\b\findMSB\b\ function\url\
\-\\url #imulextended-function\\b\imulExtended\b\ function\url\
\-\\url #uaddcarry-function\\b\uaddCarry\b\ function\url\
\-\\url #umulextended-function\\b\umulExtended\b\ function\url\
\-\\url #usubborrow-function\\b\usubBorrow\b\ function\url\
\ul\
\h3\bitCount() function\h3\
\raw\#### <code>glm.<code>**bitCount**(**v**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the number of bits set to \code\1\code\ in the binary representation of \code\value\code\.

\raw\#### <code>glm.<code>**bitCount**(**v**: *ivecN*) -\\> *ivecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\For every component \code\c\code\ of \code\v\code\:
\raw\&emsp;&emsp;\raw\Returns the number of bits set to \code\1\code\ in the binary representation of \code\c\code\.

\h3\bitfieldExtract() function\h3\
\raw\#### <code>glm.<code>**bitfieldExtract**(**value**: *int*, **offset**: *int*, **bits**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Extracts bits \code\[offset, offset + bits - 1]\code\ from value, returning them in the least
\raw\&emsp;&emsp;\raw\significant bits of the result. For unsigned data types, the most significant bits of the
\raw\&emsp;&emsp;\raw\result will be set to zero. For signed data types, the most significant bits will be set to
\raw\&emsp;&emsp;\raw\the value of bit \code\offset + base - 1\code\. If \code\bits\code\ is zero, the result will be zero. The result
\raw\&emsp;&emsp;\raw\will be undefined if \code\offset\code\ or \code\bits\code\ is negative, or if the sum of \code\offset\code\ and \code\bits\code\ is
\raw\&emsp;&emsp;\raw\greater than the number of bits used to store the operand.

\raw\#### <code>glm.<code>**bitfieldExtract**(**value**: *vecN*, **offset**: *int*, **bits**: *int*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns \code\bitfieldExtract(c, offset, bits)\code\ for every component \code\c\code\ of \code\value\code\.

\h3\bitfieldInsert() function\h3\
\raw\#### <code>glm.<code>**bitfieldInsert**(**base**: *int*, **insert**: *int*, **offset**: *int*, **bits**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the insertion the bits least-significant bits of insert into base. The result will
\raw\&emsp;&emsp;\raw\have \code\bits[offset, offset + bits - 1]\code\ taken from \code\bits[0, bits - 1]\code\ of \code\insert\code\, and all other
\raw\&emsp;&emsp;\raw\bits taken directly from the corresponding bits of \code\base\code\. If \code\bits\code\ is zero, the result will
\raw\&emsp;&emsp;\raw\simply be \code\base\code\. The result will be undefined if \code\offset\code\ or \code\bits\code\ is negative, or if the sum of
\raw\&emsp;&emsp;\raw\\code\offset\code\ and \code\bits\code\ is greater than the number of bits used to store the operand.

\raw\#### <code>glm.<code>**bitfieldInsert**(**base**: *vecN*, **insert**: *vecN*, **offset**: *int*, **bits**: *int*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns \code\bitfieldInsert(base[i], insert[i], offset, bits)\code\ for every index \code\i\code\.

\h3\bitfieldReverse() function\h3\
\raw\#### <code>glm.<code>**bitfieldReverse**(**value**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the reversal of the bits of \code\value\code\. The bit numbered \code\n\code\ of the result will be taken
\raw\&emsp;&emsp;\raw\from \code\bit(bits - 1) - n\code\ of \code\value\code\, where \code\bits\code\ is the total number of bits used to represent
\raw\&emsp;&emsp;\raw\\code\value\code\.

\raw\#### <code>glm.<code>**bitfieldReverse**(**value**: *vecN*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the reversal of the bits of \code\value\code\. The bit numbered \code\n\code\ of the result will be taken
\raw\&emsp;&emsp;\raw\from \code\bit(bits - 1) - n\code\ of \code\value\code\, where \code\bits\code\ is the total number of bits used to represent
\raw\&emsp;&emsp;\raw\\code\value\code\.

\h3\findLSB() function\h3\
\raw\#### <code>glm.<code>**findLSB**(**value**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the bit number of the least significant bit set to \code\1\code\ in the binary representation
\raw\&emsp;&emsp;\raw\of \code\value\code\. If \code\value\code\ is zero, \code\-1\code\ will be returned.

\raw\#### <code>glm.<code>**findLSB**(**value**: *vecN*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the bit number of the least significant bit set to \code\1\code\ in the binary representation
\raw\&emsp;&emsp;\raw\of \code\value\code\. If \code\value\code\ is zero, \code\-1\code\ will be returned.

\h3\findMSB() function\h3\
\raw\#### <code>glm.<code>**findMSB**(**value**: *int*) -\\> *int*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the bit number of the most significant bit in the binary representation of \code\value\code\.
\raw\&emsp;&emsp;\raw\For positive integers, the result will be the bit number of the most significant bit set to
\raw\&emsp;&emsp;\raw\\code\1\code\. For negative integers, the result will be the bit number of the most significant bit set
\raw\&emsp;&emsp;\raw\to \code\0\code\. For a value of zero or negative one, \code\-1\code\ will be returned.

\raw\#### <code>glm.<code>**findMSB**(**value**: *vecN*) -\\> *vecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Returns the bit number of the least significant bit set to \code\1\code\ in the binary representation
\raw\&emsp;&emsp;\raw\of \code\value\code\. If \code\value\code\ is zero, \code\-1\code\ will be returned.

\h3\imulExtended() function\h3\
\raw\#### <code>glm.<code>**imulExtended**(**x**: *ivecN*, **y**: *ivecN*, **msb**: *ivecN*, **lsb**: *ivecN*) -\\> *ivecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Multiplies 32-bit integers \code\x\code\ and \code\y\code\, producing a 64-bit result. The 32 least-significant
\raw\&emsp;&emsp;\raw\bits are returned in \code\lsb\code\. The 32 most-significant bits are returned in \code\msb\code\.

\h3\uaddCarry() function\h3\
\raw\#### <code>glm.<code>**uaddCarry**(**x**: *uvecN*, **y**: *uvecN*, **carry**: *uvecN*) -\\> *uvecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Adds 32-bit unsigned integer \code\x\code\ and \code\y\code\, returning the \code\sum\code\ modulo \code\pow(2, 32)\code\. The value carry
\raw\&emsp;&emsp;\raw\is set to \code\0\code\ if the \code\sum\code\ was less than \code\pow(2, 32)\code\, or to \code\1\code\ otherwise.

\h3\umulExtended() function\h3\
\raw\#### <code>glm.<code>**umulExtended**(**x**: *uvecN*, **y**: *uvecN*, **msb**: *uvecN*, **lsb**: *uvecN*) -\\> *uvecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Multiplies 32-bit integers \code\x\code\ and \code\y\code\, producing a 64-bit result. The 32 least-significant
\raw\&emsp;&emsp;\raw\bits are returned in \code\lsb\code\. The 32 most-significant bits are returned in \code\msb\code\.

\h3\usubBorrow() function\h3\
\raw\#### <code>glm.<code>**usubBorrow**(**x**: *uvecN*, **y**: *uvecN*, **borrow**: *uvecN*) -\\> *uvecN*</code></code>\raw\
\raw\&emsp;&emsp;\raw\Subtracts the 32-bit unsigned integer \code\y\code\ from \code\x\code\, returning the difference if non-negative,
\raw\&emsp;&emsp;\raw\or \code\pow(2, 32)\code\ plus the difference otherwise. The value borrow is set to \code\0\code\ if \code\x >= y\code\, or to
\raw\&emsp;&emsp;\raw\\code\1\code\ otherwise.

