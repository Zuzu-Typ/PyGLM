[title]PyGLM[/title]
[subtitle]OpenGL Mathematics (GLM) library for Python[/subtitle]
[b]GLSL + Optional features + Python = PyGLM[/b]
[b]A mathematics library for graphics programming.[/]

[i]Work in progress.[/]

[b]PyGLM[/] is using [url="https://glm.g-truc.net"]GLM by G-Truc[/] to offer a lot of the original features.  
Currently, some features haven't yet found their way into PyGLM and some never will (such as unstable extensions).
If you encounter any issues or want to request a feature, please create an issue on the [url="https://github.com/Zuzu-Typ/PyGLM/issues"]issue tracker[/].

[s1]Tiny Documentation[/]
[s2]Why PyGLM?[/]
Besides the obvious - being mostly compatible with [b]GLM[/] - PyGLM offers a variety of features for [b]vector[/] and [b]matrix manipulation[/].
It has a lot of possible use cases, including [b]3D-Graphics[/] (OpenGL, DirectX, ...), [b]Physics[/] and more.

At the same time, it has [b]great performance[/], being between [b]2x and 10x as fast as numpy![/]
([i]depending on the individual function[/])
[s2]Installation[/]
[b]PyGLM[/] supports [b]Windows[/], [b]Linux[/], [b]MacOS[/] and other operating systems with either x86 ([b]32-bit[/]) or x64 ([b]64-bit[/]) architecture, 
running [b]Python 3[/].5 or higher. (Prior versions of Python - such as Python 2 - were supported up to PyGLM version 0.4.8b1)

It can be installed from the [url=https://pypi.python.org/pypi/PyGLM]PyPI[/] using [url=https://pip.pypa.io/en/stable/]pip[/]:
[code]pip install pyglm[/code]
And finally imported and used:
[code]import glm[/code]
[s2]Using PyGLM[/]
PyGLM's syntax is very similar to the original GLM's syntax.
There is no need to import anything but [b]glm[/], as it already contains the entire package.
[s3]Differences to glm[/]
Instead of using double colons ([b]::[/]) for namespaces, periods ([b].[/]) are used, so
[code]glm::vec2[/code] becomes [code]glm.vec2[/].

PyGLM doesn't support precision qualifiers. All types use the default precision ([code]packed_highp[/code]).

If a glm function normally accepts [code]float[/code] and [code]double[/code] arguments, the higher precision ([code]double[/code]) is used.

There is no way to set preprocessor definitions (macros).
If - for example - you need to use the left handed coordinate system, you have to use [b]*LH[/], so
[code]glm.perspective[/] becomes [code]glm.perspectiveLH[/].

All types are initialized by default to avoid memory access violations.
(i.e. the macro [code]GLM_FORCE_CTOR_INIT[/code] is defined)

In case you need the size of a PyGLM datatype, you can use 
[code]glm.sizeof(<type>)[/code]

The function [code]glm.identity[/code] requires a matrix type as it's argument.

The function [code]glm.frexp(x, exp)[/code] returns a tuple [code](m, e)[/code], if the input arguments are numerical.
This function may issue a [code]UserWarning[/code]. You can silence this warning using [code]glm.silence(1)[/code].

The function [code]glm.value_ptr(x)[/code] returns a ctypes pointer of the respective type.
I.e. if the datatype of [code]x[/code] is [code]float[/code], then a [code]c_float[/code] pointer will be returned.
Likewise the reverse-functions (such as [code]make_vec2(ptr)[/code]) will take a ctypes pointer as their argument
and return (in this case) a 2 component vector of the pointers underlying type.

[code]glm.silence(ID)[/code] can be used to silence specific warnings.
Supplying an id of 0 will silence all warnings.

There is currently no documentation for PyGLM.
Please refer to the source (in Python: [b]*.__doc__[/]) and GLM manuals, references and tutorials.

[s3]Unsupported functions[/]
Aside from the unstable extensions,
PyGLM doesn't support the following extensions and methods, due to compatibility issues:
The [code]GLM_GTC_bitfield[/code] extension,
[code]glm::log2[/code] from GLM_GTC_integer.
[code]glm::packUnorm[/code] and [code]glm::packSnorm[/code] from GLM_GTC_packing.

[s2]Example[/]
[code]
>>> import glm
>>> v = glm.vec3()
>>> v.x = 7
>>> print(v.xxy)
vec3(            7,            7,            0 )

>>> m = glm.mat4()
>>> print(m)
\[            1 |            0 |            0 |            0 \]
\[            0 |            1 |            0 |            0 \]
\[            0 |            0 |            1 |            0 \]
\[            0 |            0 |            0 |            1 \]

>>> v = glm.vec4(1, 2, 3, 4)
>>> print(v + (8, 7, 6, 5))
vec4(            9,            9,            9,            9 )[/code]